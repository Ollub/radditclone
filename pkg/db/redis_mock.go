// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/db/redis_abstract_layer.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIRedisClient is a mock of IRedisClient interface.
type MockIRedisClient struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisClientMockRecorder
}

// MockIRedisClientMockRecorder is the mock recorder for MockIRedisClient.
type MockIRedisClientMockRecorder struct {
	mock *MockIRedisClient
}

// NewMockIRedisClient creates a new mock instance.
func NewMockIRedisClient(ctrl *gomock.Controller) *MockIRedisClient {
	mock := &MockIRedisClient{ctrl: ctrl}
	mock.recorder = &MockIRedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisClient) EXPECT() *MockIRedisClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIRedisClient) Get(ctx context.Context, key string) IRedisStatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(IRedisStatusCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIRedisClientMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRedisClient)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockIRedisClient) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) IRedisStatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(IRedisStatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIRedisClientMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIRedisClient)(nil).Set), ctx, key, value, expiration)
}

// MockIRedisStatusCmd is a mock of IRedisStatusCmd interface.
type MockIRedisStatusCmd struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisStatusCmdMockRecorder
}

// MockIRedisStatusCmdMockRecorder is the mock recorder for MockIRedisStatusCmd.
type MockIRedisStatusCmdMockRecorder struct {
	mock *MockIRedisStatusCmd
}

// NewMockIRedisStatusCmd creates a new mock instance.
func NewMockIRedisStatusCmd(ctrl *gomock.Controller) *MockIRedisStatusCmd {
	mock := &MockIRedisStatusCmd{ctrl: ctrl}
	mock.recorder = &MockIRedisStatusCmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisStatusCmd) EXPECT() *MockIRedisStatusCmdMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockIRedisStatusCmd) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockIRedisStatusCmdMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockIRedisStatusCmd)(nil).Err))
}

// Result mocks base method.
func (m *MockIRedisStatusCmd) Result() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockIRedisStatusCmdMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockIRedisStatusCmd)(nil).Result))
}
